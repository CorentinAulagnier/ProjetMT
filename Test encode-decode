
(**--TEST D'ENCODAGE/DECODAGE--**)

(*ETAPE 1*)

	#cd "/home/c/carrieme/WorkspaceMT/";;
	#load_rec "main.cmo";;
	open Alphabet;;
	open Band;;
	
(*ETAPE 2*)

Chargement de la classe Emulator.ml

(*ETAPE 3*)  

let alphabet = Alphabet.make [B;Z;U]  ;; (*creation d'un alphabet*)
let alphabet = Alphabet.make [B;Z;U;O;L;C]  ;; (*creation d'un alphabet*)
let band = Band.make alphabet [U;U;Z;U] ;; (*creation premiere bande*)
let band2 = Band.make alphabet [B;B;Z;U] ;; (*creation deuxieme bande*)
let encode = Binary.build_encoding alphabet ;; (*creation de l'encoding*)
let code = Binary.encode_with encode [band; band2];; (*codage des bandes*)
let decode = Binary.decode_with encode code ;; (*decodage des bandes*)

[band,band2];; (*comparaison avec les bandes initiales*)
Binary.decode_with encode (Binary.encode_with encode [band;band2]);; (*encodage/decodage en un coup*)

 (**--TEST EMULATION DE TRANSITIONS--**)
 
 let mt = Binary.emulate_action encode ( Q 2, (RWM(Match(VAL U), Write Z, Here)) ,Q 3 ) (*creation MT a partir de transistion*)
 let mt = Binary.emulate_action encode ( Q 2, (RWM(Match(VAL U), Write Z, Right)) ,Q 3 ) (*creation MT a partir de transistion*)
 let mt = Binary.emulate_action encode ( Q 2, (RWM(Match(VAL U), Write Z, Left)) ,Q 3 ) (*creation MT a partir de transistion*)

 (**--TEST SIMULATION BINAIRE--**)
  
 let mtSimulator = Binary.turingSimulator (let init = nop.initial and accept = nop.accept in
	      { nop with
		transitions =
 		[ (init, Action(RWM(Match(VAL B), Write U, Left)), init) ;
		  (init, Action(RWM(Match(VAL U), Write Z, Here)), accept)
		]
	      }) encode (*simulation d'une mt en binaire*)
	      
